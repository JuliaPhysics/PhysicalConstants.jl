var documenterSearchIndex = {"docs":
[{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"You can load the package as usual with using PhysicalConstants but this module does not provide anything useful for the end-users.  You most probably want to directly load the submodule with the dataset you are interested in.  For example, for CODATA 2018 load PhysicalConstants.CODATA2018:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> using PhysicalConstants.CODATA2018\n\njulia> SpeedOfLightInVacuum\nSpeed of light in vacuum (c_0)\nValue                         = 2.99792458e8 m s^-1\nStandard uncertainty          = (exact)\nRelative standard uncertainty = (exact)\nReference                     = CODATA 2018\n\njulia> NewtonianConstantOfGravitation\nNewtonian constant of gravitation (G)\nValue                         = 6.6743e-11 m^3 kg^-1 s^-2\nStandard uncertainty          = 1.5e-15 m^3 kg^-1 s^-2\nRelative standard uncertainty = 2.2e-5\nReference                     = CODATA 2018","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"SpeedOfLightInVacuum and NewtonianConstantOfGravitation are two of the PhysicalConstants defined in the PhysicalConstants.CODATA2018 module, the full list of available constants is given below.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"PhysicalConstants can be readily used in mathematical operations, using by default their Float64 value:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> import PhysicalConstants.CODATA2018: c_0, ε_0, μ_0\n\njulia> 2 * ε_0\n1.77083756256e-11 F m^-1\n\njulia> ε_0 - 1 / (μ_0 * c_0 ^ 2)\n-3.8450973786644646e-25 A^2 s^4 kg^-1 m^-3","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"If you want to use a different precision for the value of the constant, use the function float(float_type, constant), for example:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> float(Float32, ε_0)\n8.854188f-12 F m^-1\n\njulia> float(BigFloat, ε_0)\n8.854187812799999999999999999999999999999999999999999999999999999999999999999973e-12 F m^-1\n\njulia> big(ε_0)\n8.854187812799999999999999999999999999999999999999999999999999999999999999999973e-12 F m^-1\n\njulia> big(ε_0) - inv(big(μ_0) * big(c_0)^2)\n-3.849883307464075736533920296598236938395867709081184624499315166190408485179288e-25 A^2 s^4 kg^-1 m^-3","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Note that big(constant) is an alias for float(BigFloat, constant).","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"If in addition to units you also want the standard uncertainty associated with the constant, use measurement(x):","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> using Measurements\n\njulia> import PhysicalConstants.CODATA2018: h, ħ\n\njulia> measurement(ħ)\n1.0545718176461565e-34 ± 0.0 J s\n\njulia> measurement(Float32, ħ)\n1.0545718e-34 ± 0.0 J s\n\njulia> measurement(BigFloat, ħ)\n1.054571817646156391262428003302280744722826330020413122421923470598435912734741e-34 ± 0.0 J s\n\njulia> measurement(BigFloat, ħ) / (measurement(BigFloat, h) / (2 * big(pi)))\n1.0 ± 0.0","category":"page"},{"location":"constants/#List-of-Set-of-Constants","page":"List of Constants","title":"List of Set of Constants","text":"","category":"section"},{"location":"constants/","page":"List of Constants","title":"List of Constants","text":"note: Note\nEach dataset listed below exports by default only the full long names of the constants.  Short aliases are provided for convenience, but they are not exported, to avoid polluting the main namespace with dozens of short-named variables. Users can to import the short names of the variables they use most frequently, as shown in the examples above.","category":"page"},{"location":"constants/#CODATA2014","page":"List of Constants","title":"CODATA2014","text":"","category":"section"},{"location":"constants/","page":"List of Constants","title":"List of Constants","text":"Long name Short Value Unit\nAtomicMassConstant m_u 1.66053904e-27 kg\nAvogadroConstant N_A 6.022140857e23 mol^-1\nBohrMagneton μ_B 9.274009994e-24 J T^-1\nBohrRadius a_0 5.2917721067e-11 m\nBoltzmannConstant k_B 1.38064852e-23 J K^-1\nCharacteristicImpedanceOfVacuum Z_0 376.73031346177066 Ω\nElectricConstant ε_0 8.854187817620389e-12 F m^-1\nElectronMass m_e 9.10938356e-31 kg\nElementaryCharge e 1.6021766208e-19 C\nFineStructureConstant α 0.0072973525664 \nMagneticConstant μ_0 1.2566370614359173e-6 N A^-2\nMolarGasConstant R 8.3144598 J K^-1 mol^-1\nNeutronMass m_n 1.674927471e-27 kg\nNewtonianConstantOfGravitation G 6.67408e-11 m^3 kg^-1 s^-2\nPlanckConstant h 6.62607004e-34 J s\nPlanckConstantOver2pi ħ 1.0545718001391127e-34 J s\nProtonMass m_p 1.672621898e-27 kg\nRydbergConstant R_∞ 1.0973731568508e7 m^-1\nSpeedOfLightInVacuum c_0 2.99792458e8 m s^-1\nStandardAccelerationOfGravitation g_n 9.80665 m s^-2\nStandardAtmosphere atm 101325.0 Pa\nStefanBoltzmannConstant σ 5.670367e-8 W K^-4 m^-2\nThomsonCrossSection σ_e 6.6524587158e-29 m^2\nWienWavelengthDisplacementLawConstant b 0.0028977729 K m","category":"page"},{"location":"constants/#CODATA2018","page":"List of Constants","title":"CODATA2018","text":"","category":"section"},{"location":"constants/","page":"List of Constants","title":"List of Constants","text":"Long name Short Value Unit\nAtomicMassConstant m_u 1.6605390666e-27 kg\nAvogadroConstant N_A 6.02214076e23 mol^-1\nBohrMagneton μ_B 9.2740100783e-24 J T^-1\nBohrRadius a_0 5.29177210903e-11 m\nBoltzmannConstant k_B 1.380649e-23 J K^-1\nCharacteristicImpedanceOfVacuum Z_0 376.730313668 Ω\nElectronMass m_e 9.1093837015e-31 kg\nElementaryCharge e 1.602176634e-19 C\nFineStructureConstant α 0.0072973525693 \nMolarGasConstant R 8.31446261815324 J K^-1 mol^-1\nNeutronMass m_n 1.67492749804e-27 kg\nNewtonianConstantOfGravitation G 6.6743e-11 m^3 kg^-1 s^-2\nPlanckConstant h 6.62607015e-34 J s\nProtonMass m_p 1.67262192369e-27 kg\nReducedPlanckConstant ħ 1.0545718176461565e-34 J s\nRydbergConstant R_∞ 1.097373156816e7 m^-1\nSpeedOfLightInVacuum c_0 2.99792458e8 m s^-1\nStandardAccelerationOfGravitation g_n 9.80665 m s^-2\nStandardAtmosphere atm 101325.0 Pa\nStefanBoltzmannConstant σ 5.6703744191844294e-8 W K^-4 m^-2\nThomsonCrossSection σ_e 6.6524587321e-29 m^2\nVacuumElectricPermittivity ε_0 8.8541878128e-12 F m^-1\nVacuumMagneticPermeability μ_0 1.25663706212e-6 N A^-2\nWienFrequencyDisplacementLawConstant b′ 5.878925757646825e10 Hz K^-1\nWienWavelengthDisplacementLawConstant b 0.0028977719551851727 K m","category":"page"},{"location":"reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"reference/#Types","page":"API Reference","title":"Types","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Modules = [PhysicalConstants]\nOrder = [:type]","category":"page"},{"location":"reference/#PhysicalConstants.PhysicalConstant","page":"API Reference","title":"PhysicalConstants.PhysicalConstant","text":"PhysicalConstant{name,T,D,U} <: AbstractQuantity{T,D,U}\n\nA type representing a physical constant, with units and – optionally – with error as standard deviation.\n\nEach type is a singleton and is parametrised by\n\nname: a Symbol representing its name\nT: the numerical type of the constant, e.g. Float64\nD: the physical dimension, from Unitful.jl\nU: the physical unit, from Unitful.jl\n\nSee @constant and @derived_constant for how to define a new physical constant.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Functions","page":"API Reference","title":"Functions","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Modules = [PhysicalConstants]\nOrder = [:function]","category":"page"},{"location":"reference/#Base.float-Tuple{PhysicalConstants.PhysicalConstant}","page":"API Reference","title":"Base.float","text":"float(::PhysicalConstant{name,T,D,U}) where {T,D,U}\nfloat(FloatType, ::PhysicalConstant{name,T,D,U}) where {T,D,U}\n\nReturn the physical constant as a Quantity with the floating type optionally specified by FloatType, Float64 by default.\n\njulia> using PhysicalConstants.CODATA2018: G\n\njulia> G\nNewtonian constant of gravitation (G)\nValue                         = 6.6743e-11 m^3 kg^-1 s^-2\nStandard uncertainty          = 1.5e-15 m^3 kg^-1 s^-2\nRelative standard uncertainty = 2.2e-5\nReference                     = CODATA 2018\n\njulia> float(G)\n6.6743e-11 m^3 kg^-1 s^-2\n\njulia> float(Float32, G)\n6.6743f-11 m^3 kg^-1 s^-2\n\n\n\n\n\n","category":"method"},{"location":"reference/#Measurements.measurement-Tuple{PhysicalConstants.PhysicalConstant}","page":"API Reference","title":"Measurements.measurement","text":"measurement(::PhysicalConstant{name,T,D,U}) where {T,D,U}\nmeasurement(FloatType, ::PhysicalConstant{name,T,D,U}) where {T,D,U}\n\nReturn the physical constant as a Quantity with standard uncertainty.  The floating-point precision can be optionally specified with the FloatType, Float64 by default.\n\njulia> using PhysicalConstants.CODATA2018, Measurements\n\njulia> import PhysicalConstants.CODATA2018: μ_0\n\njulia> μ_0\nVacuum magnetic permeability (μ_0)\nValue                         = 1.25663706212e-6 N A^-2\nStandard uncertainty          = 1.9e-16 N A^-2\nRelative standard uncertainty = 1.5e-10\nReference                     = CODATA 2018\n\njulia> measurement(μ_0)\n1.25663706212e-6 ± 1.9e-16 N A^-2\n\njulia> measurement(Float32, μ_0)\n1.256637e-6 ± 1.9e-16 N A^-2\n\n\n\n\n\n","category":"method"},{"location":"reference/#Macros","page":"API Reference","title":"Macros","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Modules = [PhysicalConstants]\nOrder = [:macro]","category":"page"},{"location":"reference/#PhysicalConstants.@constant-NTuple{9, Any}","page":"API Reference","title":"PhysicalConstants.@constant","text":"@constant(name, sym, descr, val, def, unit, unc, bigunc, reference) -> PhysicalConstant\n\nMacro to define a new PhysicalConstant.\n\nThe arguments are:\n\nname: a symbol with the long name of the constant.  This symbol is automatically eported\nsym: a non-exported alias for the constant\ndescr: a description of the constant\nval: the numerical Float64 value of the constant, in the reference units\ndef:  the expression to use to compute the constant in any precision, in the reference units\nunit: the reference units\nunc: the numerical Float64 value of the uncertainty, in the reference units\nbigunc: the expression to use to compute the uncertainty in any precision, in the reference units\nreference: the name of the reference\n\njulia> using PhysicalConstants, Unitful\n\njulia> PhysicalConstants.@constant(MyConstant, mc, \"A custom constant\",\n           12.34, BigFloat(1234) / BigFloat(100), u\"m/s\",\n           0.56, BigFloat(56) / BigFloat(100), \"My lab notebook\")\n\njulia> MyConstant\nA custom constant (mc)\nValue                         = 12.34 m s^-1\nStandard uncertainty          = 0.56 m s^-1\nRelative standard uncertainty = 0.045\nReference                     = My lab notebook\n\n\n\n\n\n","category":"macro"},{"location":"reference/#PhysicalConstants.@derived_constant-NTuple{9, Any}","page":"API Reference","title":"PhysicalConstants.@derived_constant","text":"@derived_constant(name, sym, descr, val, def, unit, unc, bigunc, reference) -> PhysicalConstant\n\nMacro to define a new PhysicalConstant derived from another existing PhysicalConstant.\n\nThe arguments are:\n\nname: a symbol with the long name of the constant.  This symbol is automatically eported\nsym: a non-exported alias for the constant\ndescr: a description of the constant\nval: the numerical Float64 value of the constant, in the reference units\ndef:  the expression to use to compute the constant in any precision, in the reference units\nunit: the reference units\nmeasure64: the numerical Measurement{Float64} value of the constant, in the reference units\nmeasurebig: the expression to use to compute the comstamt as a Measurement{BigFloat}, in the reference units\nreference: the name of the reference\n\njulia> using PhysicalConstants, Unitful, Measurements\n\njulia> PhysicalConstants.@constant(MyConstant, mc, \"A custom constant\",\n           12.34, BigFloat(1234) / BigFloat(100), u\"m/s\",\n           0.56, BigFloat(56) / BigFloat(100), \"My lab notebook\")\n\njulia> MyConstant\nA custom constant (mc)\nValue                         = 12.34 m s^-1\nStandard uncertainty          = 0.56 m s^-1\nRelative standard uncertainty = 0.045\nReference                     = My lab notebook\n\njulia> PhysicalConstants.@derived_constant(MyDerivedConstant, mdc, \"A custom derived constant\",\n           96.252, ustrip(big(mc)) * BigFloat(78) / BigFloat(10), u\"m/s\",\n           measurement(mc) * 7.8, measurement(BigFloat, mc)  * BigFloat(78) / BigFloat(10),\n           \"My lab notebook\")\n\njulia> MyDerivedConstant\nA custom derived constant (mdc)\nValue                         = 96.252 m s^-1\nStandard uncertainty          = 4.368 m s^-1\nRelative standard uncertainty = 0.045\nReference                     = My lab notebook\n\n\n\n\n\n","category":"macro"},{"location":"#PhysicalConstants.jl","page":"Introduction","title":"PhysicalConstants.jl","text":"","category":"section"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"PhysicalConstants.jl provides common physical constants.  They are defined as instances of the new Constant type, which is subtype of AbstractQuantity (from Unitful.jl package) and can also be turned into Measurement objects (from Measurements.jl package) at request.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Constants are grouped into different submodules, so that the user can choose different datasets as needed.  Currently, 2014 and 2018 editions of CODATA recommended values of the fundamental physical constants are provided.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The latest version of PhysicalConstants.jl is available for Julia 1.0 and later versions, and can be installed with Julia built-in package manager.  After entering the package manager mode by pressing ], run the command","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"pkg> add PhysicalConstants","category":"page"},{"location":"#License","page":"Introduction","title":"License","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The PhysicalConstants.jl package is licensed under the MIT \"Expat\" License. The original author is Mosè Giordano.","category":"page"}]
}
